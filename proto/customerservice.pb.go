// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customerservice.proto

/*
Package customerservice is a generated protocol buffer package.

It is generated from these files:
	customerservice.proto

It has these top-level messages:
	CustomerRequest
	Customer
	Address
	Order
	ImportSummary
*/
package customerservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CustomerRequest struct {
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
}

func (m *CustomerRequest) Reset()                    { *m = CustomerRequest{} }
func (m *CustomerRequest) String() string            { return proto.CompactTextString(m) }
func (*CustomerRequest) ProtoMessage()               {}
func (*CustomerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CustomerRequest) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

type Customer struct {
	CustomerId string   `protobuf:"bytes,1,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	GivenName  string   `protobuf:"bytes,2,opt,name=given_name,json=givenName" json:"given_name,omitempty"`
	Surname    string   `protobuf:"bytes,3,opt,name=surname" json:"surname,omitempty"`
	Address    *Address `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Customer) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *Customer) GetGivenName() string {
	if m != nil {
		return m.GivenName
	}
	return ""
}

func (m *Customer) GetSurname() string {
	if m != nil {
		return m.Surname
	}
	return ""
}

func (m *Customer) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type Address struct {
	Line1 string `protobuf:"bytes,1,opt,name=line1" json:"line1,omitempty"`
	Line2 string `protobuf:"bytes,2,opt,name=line2" json:"line2,omitempty"`
	City  string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	State string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	Zip   string `protobuf:"bytes,5,opt,name=zip" json:"zip,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Address) GetLine1() string {
	if m != nil {
		return m.Line1
	}
	return ""
}

func (m *Address) GetLine2() string {
	if m != nil {
		return m.Line2
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

type Order struct {
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Qty     int32  `protobuf:"varint,2,opt,name=qty" json:"qty,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Order) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Order) GetQty() int32 {
	if m != nil {
		return m.Qty
	}
	return 0
}

type ImportSummary struct {
	TotalCustomers int32 `protobuf:"varint,1,opt,name=total_customers,json=totalCustomers" json:"total_customers,omitempty"`
	ErrorCount     int32 `protobuf:"varint,2,opt,name=error_count,json=errorCount" json:"error_count,omitempty"`
	ElapsedTime    int32 `protobuf:"varint,3,opt,name=elapsed_time,json=elapsedTime" json:"elapsed_time,omitempty"`
}

func (m *ImportSummary) Reset()                    { *m = ImportSummary{} }
func (m *ImportSummary) String() string            { return proto.CompactTextString(m) }
func (*ImportSummary) ProtoMessage()               {}
func (*ImportSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ImportSummary) GetTotalCustomers() int32 {
	if m != nil {
		return m.TotalCustomers
	}
	return 0
}

func (m *ImportSummary) GetErrorCount() int32 {
	if m != nil {
		return m.ErrorCount
	}
	return 0
}

func (m *ImportSummary) GetElapsedTime() int32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*CustomerRequest)(nil), "customerservice.CustomerRequest")
	proto.RegisterType((*Customer)(nil), "customerservice.Customer")
	proto.RegisterType((*Address)(nil), "customerservice.Address")
	proto.RegisterType((*Order)(nil), "customerservice.Order")
	proto.RegisterType((*ImportSummary)(nil), "customerservice.ImportSummary")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Customers service

type CustomersClient interface {
	GetCustomerDetails(ctx context.Context, opts ...grpc.CallOption) (Customers_GetCustomerDetailsClient, error)
	ImportCustomers(ctx context.Context, opts ...grpc.CallOption) (Customers_ImportCustomersClient, error)
	GetCustomerOrders(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (Customers_GetCustomerOrdersClient, error)
}

type customersClient struct {
	cc *grpc.ClientConn
}

func NewCustomersClient(cc *grpc.ClientConn) CustomersClient {
	return &customersClient{cc}
}

func (c *customersClient) GetCustomerDetails(ctx context.Context, opts ...grpc.CallOption) (Customers_GetCustomerDetailsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Customers_serviceDesc.Streams[0], c.cc, "/customerservice.Customers/get_customer_details", opts...)
	if err != nil {
		return nil, err
	}
	x := &customersGetCustomerDetailsClient{stream}
	return x, nil
}

type Customers_GetCustomerDetailsClient interface {
	Send(*CustomerRequest) error
	Recv() (*Customer, error)
	grpc.ClientStream
}

type customersGetCustomerDetailsClient struct {
	grpc.ClientStream
}

func (x *customersGetCustomerDetailsClient) Send(m *CustomerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customersGetCustomerDetailsClient) Recv() (*Customer, error) {
	m := new(Customer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customersClient) ImportCustomers(ctx context.Context, opts ...grpc.CallOption) (Customers_ImportCustomersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Customers_serviceDesc.Streams[1], c.cc, "/customerservice.Customers/import_customers", opts...)
	if err != nil {
		return nil, err
	}
	x := &customersImportCustomersClient{stream}
	return x, nil
}

type Customers_ImportCustomersClient interface {
	Send(*Customer) error
	CloseAndRecv() (*ImportSummary, error)
	grpc.ClientStream
}

type customersImportCustomersClient struct {
	grpc.ClientStream
}

func (x *customersImportCustomersClient) Send(m *Customer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *customersImportCustomersClient) CloseAndRecv() (*ImportSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customersClient) GetCustomerOrders(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (Customers_GetCustomerOrdersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Customers_serviceDesc.Streams[2], c.cc, "/customerservice.Customers/get_customer_orders", opts...)
	if err != nil {
		return nil, err
	}
	x := &customersGetCustomerOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Customers_GetCustomerOrdersClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type customersGetCustomerOrdersClient struct {
	grpc.ClientStream
}

func (x *customersGetCustomerOrdersClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Customers service

type CustomersServer interface {
	GetCustomerDetails(Customers_GetCustomerDetailsServer) error
	ImportCustomers(Customers_ImportCustomersServer) error
	GetCustomerOrders(*CustomerRequest, Customers_GetCustomerOrdersServer) error
}

func RegisterCustomersServer(s *grpc.Server, srv CustomersServer) {
	s.RegisterService(&_Customers_serviceDesc, srv)
}

func _Customers_GetCustomerDetails_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomersServer).GetCustomerDetails(&customersGetCustomerDetailsServer{stream})
}

type Customers_GetCustomerDetailsServer interface {
	Send(*Customer) error
	Recv() (*CustomerRequest, error)
	grpc.ServerStream
}

type customersGetCustomerDetailsServer struct {
	grpc.ServerStream
}

func (x *customersGetCustomerDetailsServer) Send(m *Customer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customersGetCustomerDetailsServer) Recv() (*CustomerRequest, error) {
	m := new(CustomerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Customers_ImportCustomers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CustomersServer).ImportCustomers(&customersImportCustomersServer{stream})
}

type Customers_ImportCustomersServer interface {
	SendAndClose(*ImportSummary) error
	Recv() (*Customer, error)
	grpc.ServerStream
}

type customersImportCustomersServer struct {
	grpc.ServerStream
}

func (x *customersImportCustomersServer) SendAndClose(m *ImportSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *customersImportCustomersServer) Recv() (*Customer, error) {
	m := new(Customer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Customers_GetCustomerOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CustomerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomersServer).GetCustomerOrders(m, &customersGetCustomerOrdersServer{stream})
}

type Customers_GetCustomerOrdersServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type customersGetCustomerOrdersServer struct {
	grpc.ServerStream
}

func (x *customersGetCustomerOrdersServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

var _Customers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customerservice.Customers",
	HandlerType: (*CustomersServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get_customer_details",
			Handler:       _Customers_GetCustomerDetails_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "import_customers",
			Handler:       _Customers_ImportCustomers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "get_customer_orders",
			Handler:       _Customers_GetCustomerOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "customerservice.proto",
}

func init() { proto.RegisterFile("customerservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb5, 0x6d, 0x4d, 0xea, 0x09, 0x90, 0x6a, 0x28, 0xc8, 0xad, 0x04, 0x04, 0x5f, 0xf0,
	0xa9, 0x2a, 0x86, 0x17, 0x40, 0x3d, 0xe5, 0x42, 0x85, 0x41, 0xe2, 0x68, 0x2d, 0xde, 0x51, 0xb5,
	0x92, 0xed, 0x75, 0x76, 0xd7, 0x95, 0x82, 0x78, 0x00, 0x1e, 0x81, 0xc7, 0x45, 0x1e, 0xaf, 0x1b,
	0x35, 0x51, 0x45, 0x6f, 0x33, 0xbf, 0xf9, 0x76, 0xfe, 0x7c, 0x89, 0xe1, 0x65, 0xd5, 0x3b, 0x6f,
	0x1a, 0xb2, 0x8e, 0xec, 0xad, 0xae, 0xe8, 0xa2, 0xb3, 0xc6, 0x1b, 0x5c, 0xec, 0xe0, 0x34, 0x87,
	0xc5, 0x55, 0x40, 0x05, 0xad, 0x7b, 0x72, 0x1e, 0xdf, 0xc2, 0x7c, 0x52, 0x95, 0x5a, 0x25, 0x62,
	0x29, 0xb2, 0xb8, 0x80, 0x09, 0xad, 0x54, 0xfa, 0x57, 0xc0, 0xf1, 0xf4, 0xe8, 0xbf, 0x6a, 0x7c,
	0x0d, 0x70, 0xa3, 0x6f, 0xa9, 0x2d, 0x5b, 0xd9, 0x50, 0x72, 0xc0, 0xf5, 0x98, 0xc9, 0x17, 0xd9,
	0x10, 0x26, 0x30, 0x73, 0xbd, 0xe5, 0xda, 0x21, 0xd7, 0xa6, 0x14, 0x73, 0x98, 0x49, 0xa5, 0x2c,
	0x39, 0x97, 0x1c, 0x2d, 0x45, 0x36, 0xcf, 0x93, 0x8b, 0xdd, 0xa3, 0x3e, 0x8f, 0xf5, 0x62, 0x12,
	0xa6, 0x6b, 0x98, 0x05, 0x86, 0xa7, 0x10, 0xd5, 0xba, 0xa5, 0x0f, 0x61, 0xa5, 0x31, 0x99, 0x68,
	0x1e, 0x16, 0x19, 0x13, 0x44, 0x38, 0xaa, 0xb4, 0xdf, 0x84, 0x0d, 0x38, 0x1e, 0x94, 0xce, 0x4b,
	0x4f, 0x3c, 0x3c, 0x2e, 0xc6, 0x04, 0x4f, 0xe0, 0xf0, 0x97, 0xee, 0x92, 0x88, 0xd9, 0x10, 0xa6,
	0x9f, 0x20, 0xba, 0xb6, 0x8a, 0x2c, 0x9e, 0xc1, 0xb1, 0x19, 0x82, 0xad, 0x0d, 0x33, 0xce, 0x57,
	0x6a, 0x78, 0xb5, 0xf6, 0x1b, 0x9e, 0x19, 0x15, 0x43, 0x98, 0xfe, 0x86, 0x67, 0xab, 0xa6, 0x33,
	0xd6, 0x7f, 0xeb, 0x9b, 0x46, 0xda, 0x0d, 0xbe, 0x87, 0x85, 0x37, 0x5e, 0xd6, 0xe5, 0xdd, 0x8d,
	0xdc, 0x24, 0x2a, 0x9e, 0x33, 0x9e, 0xfc, 0x76, 0x83, 0xe1, 0x64, 0xad, 0xb1, 0x65, 0x65, 0xfa,
	0xd6, 0x87, 0x9e, 0xc0, 0xe8, 0x6a, 0x20, 0xf8, 0x0e, 0x9e, 0x52, 0x2d, 0x3b, 0x47, 0xaa, 0xf4,
	0x3a, 0xd8, 0x1a, 0x15, 0xf3, 0xc0, 0xbe, 0xeb, 0x86, 0xf2, 0x3f, 0x07, 0x10, 0x6f, 0x3b, 0xfe,
	0x80, 0xd3, 0x1b, 0xf2, 0x77, 0x83, 0x4b, 0x45, 0x5e, 0xea, 0xda, 0xe1, 0x72, 0xcf, 0xef, 0x9d,
	0xbf, 0xca, 0xf9, 0xd9, 0x83, 0x8a, 0x4c, 0x5c, 0x0a, 0xbc, 0x86, 0x13, 0xcd, 0x47, 0x6e, 0x8f,
	0xc2, 0x87, 0x9f, 0x9c, 0xbf, 0xd9, 0x2b, 0xdd, 0xb3, 0x28, 0x13, 0xf8, 0x15, 0x5e, 0xdc, 0xdb,
	0x94, 0xfd, 0x7d, 0xcc, 0xa2, 0xaf, 0xf6, 0x14, 0xfc, 0x9b, 0x5d, 0x8a, 0x9f, 0x4f, 0xf8, 0xc3,
	0xf8, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x30, 0xc7, 0x9e, 0x85, 0x31, 0x03, 0x00, 0x00,
}
